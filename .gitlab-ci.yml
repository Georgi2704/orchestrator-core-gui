---
stages:
  - unit-test
  - build
  - scan
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: registry.automation.surf.net/nwa/workflows-client:$CI_COMMIT_SHA
  CONTAINER_DEV_IMAGE: registry.automation.surf.net/nwa/workflows-client:dev
  CONTAINER_MASTER_IMAGE: registry.automation.surf.net/nwa/workflows-client:master
  CONTAINER_RELEASE_IMAGE: registry.automation.surf.net/nwa/workflows-client:$CI_COMMIT_TAG
  CONTAINER_LATEST_IMAGE: registry.automation.surf.net/nwa/workflows-client:latest

test workflows-client:
  stage: unit-test
  image: node:10.16.0
  script:
    - yarn install
    - yarn prettier -c '**/*.{js,jsx,scss,md}'
    - yarn test --coverage
  tags:
      - python-lint-ext

build docker image:
  stage: build
  image: docker:latest
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  tags:
    - docker-ct-builder-ext

scan docker images:
  stage: scan
  dependencies:
    - build docker image
  image:
    name: anchore/anchore-engine:v0.3.0
    entrypoint: [""]
  services:
    - name: anchore/engine-db-preload:v0.3.0
      alias: anchore-db

  variables:
    GIT_STRATEGY: none
    ANCHORE_FAIL_ON_POLICY: "false"
    ANCHORE_TIMEOUT: 500

  script:
    - |
      curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/v0.3.0/scripts/anchore_ci_tools.py
      chmod +x /tmp/anchore_ci_tools.py
      ln -s /tmp/anchore_ci_tools.py /usr/local/bin/anchore_ci_tools
    - anchore_ci_tools --setup
    - anchore-cli registry add registry.automatuion.surf.net foo  bar --skip-validate
    - anchore_ci_tools --analyze --report --image "$CONTAINER_TEST_IMAGE" --timeout "$ANCHORE_TIMEOUT"
    - |
      if [ "$ANCHORE_FAIL_ON_POLICY" == "true" ]; then
        anchore-cli evaluate check "$CONTAINER_TEST_IMAGE"
      else
        set +o pipefail
        anchore-cli evaluate check "$CONTAINER_TEST_IMAGE" | tee /dev/null
      fi

  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
      - anchore-reports/*
  tags:
    - docker-ct-builder-ext
  only:
    - tags

anchore_reports:
  stage: release
  image: alpine:latest
  dependencies:
    - scan docker images

  variables:
    GIT_STRATEGY: none

  script:
    - apk add jq
    - |
        echo "Parsing anchore reports."
        printf "\n%s\n" "The following vulnerabilites were found on ${CONTAINER_TEST_IMAGE}:"
        jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln], severity: [.[].severity]}]' anchore-reports/image-vuln-report.json || true
  tags:
    - docker-ct-builder-ext
  only:
    - tags

release image dev:
  stage: release
  image: docker:latest
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_DEV_IMAGE
    - docker push $CONTAINER_DEV_IMAGE
  tags:
    - docker-ct-builder-ext
  only:
    - dev@automation/workflows-client

release image staging:
  stage: release
  image: docker:latest
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_MASTER_IMAGE
    - docker push $CONTAINER_MASTER_IMAGE
  tags:
    - docker-ct-builder-ext
  only:
    - master@automation/workflows-client

release image prod:
  stage: release
  image: docker:latest
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE
  tags:
    - docker-ct-builder-ext
  only:
    - tags

deploy to dev:
  stage: deploy
  script:
    - ssh deploy@swarm01.dev.automation.surf.net  "sudo docker service update --image $CONTAINER_DEV_IMAGE dev_workflows-client"
  environment:
    name: development
    url: https://orchestrator.dev.automation.surf.net/
  tags:
    - shell-ext
  only:
    - dev@automation/workflows-client

deploy to staging:
  stage: deploy
  script:
    - ssh deploy@swarm01.staging.automation.surf.net  "sudo docker service update --image $CONTAINER_MASTER_IMAGE staging_workflows-client"
  environment:
    name: staging
    url: https://orchestrator.staging.automation.surf.net/
  tags:
    - shell-ext
  only:
    - master@automation/workflows-client

deploy to prod:
 stage: deploy
 script:
   - ssh deploy@swarm01.automation.surf.net  "sudo docker service update --image $CONTAINER_RELEASE_IMAGE prod_workflows-client"
 environment:
   name: production
   url: https://orchestrator.automation.surf.net/
 tags:
   - shell-ext
 only:
   - tags
